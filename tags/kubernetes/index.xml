<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on ZB</title>
    <link>https://k8sz.github.io/tags/kubernetes/</link>
    <description>Recent content in kubernetes on ZB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://k8sz.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubernetes之prometheus简介</title>
      <link>https://k8sz.github.io/post/kubernetes-prometheus-intro/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kubernetes-prometheus-intro/</guid>
      <description>&lt;p&gt;kubernetes作为当下最炙手可热的容器编排平台，在给应用部署运维带来便捷的同时，也给应用及性能监控带来了新的挑战。&lt;/p&gt;

&lt;p&gt;本文给大家分享一款十分火热的开源监控工具Prometheus，让我们一起来看它是如何兼顾传统的应用监控、主机性能监控和Kubernetes监控的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes CI/CD之drone安装</title>
      <link>https://k8sz.github.io/post/kubernetes-drone-install/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kubernetes-drone-install/</guid>
      <description>&lt;p&gt;Drone是一种基于容器技术的持续交付系统。使用简单的YAML配置文件来定义和执行Docker容器中定义的Pipeline，Drone主要由两个部分组成：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server端负责身份认证，仓库配置，用户，Secrets以及Webhook相关配置&lt;/li&gt;
&lt;li&gt;Agent端端用于接受构建的作业和真正用于运行的 Pipeline 工作流&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Server 和 Agent 都是非常轻量级的服务，大概只使用 10~15MB 内存&lt;/p&gt;

&lt;p&gt;本文将介绍在kubernetes 集群基于Drone搭建一个CI/CD服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes之gogs安装</title>
      <link>https://k8sz.github.io/post/kubernetesgogs/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kubernetesgogs/</guid>
      <description>&lt;p&gt;Gogs 是一款极易搭建的自助 Git 服务。
Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。&lt;/p&gt;

&lt;p&gt;本文介绍在kubernetes安装gogs git服务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes之Helm安装</title>
      <link>https://k8sz.github.io/post/kuberneteshelm/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kuberneteshelm/</guid>
      <description>&lt;p&gt;Helm可帮助您管理Kubernetes应用程序 - Helm Charts可帮助您定义，安装和升级最复杂的Kubernetes应用程序。Helm就相当于kubernetes环境下的yum包管理工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes之使用kubeadm安装1.15.2</title>
      <link>https://k8sz.github.io/post/kuberneteskubeadm/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kuberneteskubeadm/</guid>
      <description>&lt;p&gt;Kubeadm 是一个工具，它提供了 kubeadm init 以及 kubeadm join 这两个命令作为快速创建 kubernetes 集群的最佳实践。
kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是之前的节点准备工作。同样的，诸如安装各种各样值得拥有的插件，例如 Kubernetes Dashboard、监控解决方案以及特定云提供商的插件，这些都不在它负责的范围。
相反，我们期望由一个基于 kubeadm 从更高层设计的更加合适的工具来做这些事情；并且，理想情况下，使用 kubeadm 作为所有部署的基础将会使得创建一个符合期望的集群变得容易。&lt;/p&gt;

&lt;p&gt;以下是简述使用kubeadm搭建一个集群的过程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes之LDAP安装</title>
      <link>https://k8sz.github.io/post/kubernetesldap/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kubernetesldap/</guid>
      <description>&lt;p&gt;轻型目录访问协议（英文：Lightweight Directory Access Protocol 缩写: LDAP）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。
可以这样讲：市面上只要你能够想像得到的所有工具软件，全部都支持LDAP协议。比如说你公司要安装一个项目管理工具，那么这个工具几乎必然支持LDAP协议，你公司要安装一个bug管理工具，这工具必然也支持LDAP协议，你公司要安装一套软件版本管理工具，这工具也必然支持LDAP协议。LDAP协议的好处就是你公司的所有员工在所有这些工具里共享同一套用户名和密码，来人的时候新增一个用户就能自动访问所有系统，走人的时候一键删除就取消了他对所有系统的访问权限，这就是LDAP。&lt;/p&gt;

&lt;p&gt;本文将介绍如何使用Helm在kubernetes 集群上搭建一个OpenLDAP服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 开篇</title>
      <link>https://k8sz.github.io/post/kubernetesopenings/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/kubernetesopenings/</guid>
      <description>&lt;p&gt;Kubernetes是一个可移植，可扩展的开源平台，用于管理容器化工作负载和服务，有助于声明性配置和自动化。作为一个从业运维工作的人员，得益与容器Docker和容器编排Kubernetes的出现，解决了许多运维中出现的痛点，提高运维效率。Kubernetes是如何解决运维中出现的痛点的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dockerfile 最佳实践</title>
      <link>https://k8sz.github.io/post/dockerfilebestpractice/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://k8sz.github.io/post/dockerfilebestpractice/</guid>
      <description>&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;官方关于&lt;code&gt;Dockerfile&lt;/code&gt;最佳实践原文链接地址：&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;可以通过从&lt;code&gt;Dockerfile&lt;/code&gt;包含所有命令的文本文件中读取指令自动构建镜像，以便构建给定镜像。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfiles&lt;/code&gt;使用特定的格式并使用一组特定的指令。您可以在 &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile Reference&lt;/a&gt; 页面上了解基础知识 。如果你是新手写作&lt;code&gt;Dockerfile&lt;/code&gt;，你应该从那里开始。&lt;/p&gt;

&lt;p&gt;本文档介绍了由 Docker，Inc. 和 Docker 社区推荐的用于构建高效镜像的最佳实践和方法。要查看更多实践和建议，请查看 &lt;a href=&#34;https://github.com/docker-library/buildpack-deps/blob/master/jessie/Dockerfile&#34;&gt;Dockerfile for buildpack-deps&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>